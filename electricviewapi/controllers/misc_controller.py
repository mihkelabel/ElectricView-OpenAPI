# -*- coding: utf-8 -*-

"""
electricviewapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from electricviewapi.api_helper import APIHelper
from electricviewapi.configuration import Server
from electricviewapi.controllers.base_controller import BaseController


class MiscController(BaseController):

    """A Controller to access Endpoints in the electricviewapi API."""
    def __init__(self, config):
        super(MiscController, self).__init__(config)

    def get_token_authenticate(self,
                               body):
        """Does a POST request to /login.

        Authentication endpoint.
        You need token to execute whatever next request.

        Args:
            body (GetTokenAuthenticateRequest): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/login'
        _query_builder = self.config.get_base_uri(Server.SERVER_1)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def get_bt_to_actual(self,
                         start,
                         end,
                         bt_id,
                         plot,
                         authorization):
        """Does a GET request to /bt_to_actual.

        Compare Backtest result to Bot result and to Bot + Manual (Total)
        result.

        Args:
            start (string): TODO: type description here.
            end (string): TODO: type description here.
            bt_id (int): TODO: type description here.
            plot (bool): TODO: type description here.
            authorization (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/bt_to_actual'
        _query_builder = self.config.get_base_uri(Server.SERVER_2)
        _query_builder += _url_path
        _query_parameters = {
            'start': start,
            'end': end,
            'bt_id': bt_id,
            'plot': plot
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def get_backtest(self,
                     start,
                     end,
                     save,
                     zone,
                     bt_id,
                     flat,
                     comment,
                     authorization):
        """Does a GET request to /backtest.

        Backtest algorithm
        Optional params:
        lac_ma - LossAversionControl MA length
        plot - Plot each BT month
        save - Default False (does not save result to db)
        flat - Does not return every decison
        actual_trades - Count in our actual trades (default False)
        last_btd_count - Select last available BTD minute
        comment - BT comment

        Args:
            start (string): TODO: type description here.
            end (string): TODO: type description here.
            save (bool): TODO: type description here.
            zone (string): TODO: type description here.
            bt_id (int): TODO: type description here.
            flat (bool): TODO: type description here.
            comment (string): TODO: type description here.
            authorization (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/backtest'
        _query_builder = self.config.get_base_uri(Server.SERVER_2)
        _query_builder += _url_path
        _query_parameters = {
            'start': start,
            'end': end,
            'save': save,
            'zone': zone,
            'bt_id': bt_id,
            'flat': flat,
            'comment': comment
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def get_netted_btd_graph_values(self,
                                    start,
                                    end,
                                    ma_len,
                                    plot,
                                    authorization):
        """Does a GET request to /netted_btd.

        This endpoint returns netted BTD values for each BTD count. (value1 +
        value2 + value3 + ...)
        Optional params:
        ma_len - for moving average.
        plot - Default false. If true plots appear in the browser.

        Args:
            start (string): TODO: type description here.
            end (string): TODO: type description here.
            ma_len (int): TODO: type description here.
            plot (bool): TODO: type description here.
            authorization (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/netted_btd'
        _query_builder = self.config.get_base_uri(Server.SERVER_2)
        _query_builder += _url_path
        _query_parameters = {
            'start': start,
            'end': end,
            'ma_len': ma_len,
            'plot': plot
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def get_bot_imbalance_calculation_error(self,
                                            start,
                                            end,
                                            authorization):
        """Does a GET request to /imbalances.

        TODO: type endpoint description here.

        Args:
            start (string): TODO: type description here.
            end (string): TODO: type description here.
            authorization (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/imbalances'
        _query_builder = self.config.get_base_uri(Server.SERVER_2)
        _query_builder += _url_path
        _query_parameters = {
            'start': start,
            'end': end
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def get_netted_hourly_data(self,
                               start,
                               end,
                               net,
                               plot,
                               poly_layer,
                               ma_len,
                               authorization):
        """Does a GET request to /hourly.

        Return netted Hourly profit and netted Imbalance
        poly_layer - on netted imbalance indicates if we made profit or loss
        at the given hour. 
        ma_len - shows moving average with selected length

        Args:
            start (string): TODO: type description here.
            end (string): TODO: type description here.
            net (bool): TODO: type description here.
            plot (bool): TODO: type description here.
            poly_layer (bool): TODO: type description here.
            ma_len (int): TODO: type description here.
            authorization (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/hourly'
        _query_builder = self.config.get_base_uri(Server.SERVER_2)
        _query_builder += _url_path
        _query_parameters = {
            'start': start,
            'end': end,
            'net': net,
            'plot': plot,
            'poly_layer': poly_layer,
            'ma_len': ma_len
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def get_direction_change_trends(self,
                                    start,
                                    end,
                                    flat,
                                    authorization):
        """Does a GET request to /trends.

        Returns direction changes with each direction length.
        Flat - Defualt False. Returns response without trend_trades sub list.

        Args:
            start (string): TODO: type description here.
            end (string): TODO: type description here.
            flat (bool): TODO: type description here.
            authorization (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/trends'
        _query_builder = self.config.get_base_uri(Server.SERVER_2)
        _query_builder += _url_path
        _query_parameters = {
            'start': start,
            'end': end,
            'flat': flat
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)
