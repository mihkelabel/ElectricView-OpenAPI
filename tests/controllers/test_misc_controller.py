# -*- coding: utf-8 -*-

"""
electricviewapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from tests.test_helper import TestHelper
from electricviewapi.api_helper import APIHelper
from electricviewapi.models.get_token_authenticate_request import GetTokenAuthenticateRequest


class MiscControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(MiscControllerTests, cls).setUpClass()
        cls.controller = cls.client.misc
        cls.response_catcher = cls.controller.http_call_back

    # Authentication endpoint.
    #You need token to execute whatever next request.
    def test_get_token_authenticate(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"username":"Admin","password":"besobiho13"}', GetTokenAuthenticateRequest.from_dictionary)

        # Perform the API call through the SDK function
        self.controller.get_token_authenticate(body)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Compare Backtest result to Bot result and to Bot + Manual (Total) result.
    #
    #
    def test_get_bt_to_actual(self):
        # Parameters for the API call
        start = '2021-06-01T00:00:00'
        end = '2022-07-31T23:59:59'
        bt_id = 1001
        plot = True
        authorization = 'Token 2e15b4335a7e988d5f05bff5929c752757a7c1c16ac6ffc67f715a79f938f614'

        # Perform the API call through the SDK function
        self.controller.get_bt_to_actual(start, end, bt_id, plot, authorization)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Backtest algorithm
    #
    #Optional params:
    #lac_ma - LossAversionControl MA length
    #plot - Plot each BT month
    #save - Default False (does not save result to db)
    #flat - Does not return every decison
    #actual_trades - Count in our actual trades (default False)
    #last_btd_count - Select last available BTD minute
    #comment - BT comment
    #
    def test_get_backtest(self):
        # Parameters for the API call
        start = '2021-05-19T00:00:00'
        end = '2022-08-31T23:59:59'
        save = True
        zone = 'EE'
        bt_id = 1010
        flat = True
        comment = 'EE Balance tree 1010  Spread tree 1013 Benchmark-Run'
        authorization = 'Token 2e5936965874fbedc812833105e09e710467fa5aab051cacc47e72f24a3e0f87'

        # Perform the API call through the SDK function
        self.controller.get_backtest(start, end, save, zone, bt_id, flat, comment, authorization)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # This endpoint returns netted BTD values for each BTD count. (value1 + value2 + value3 + ...)
    #
    #Optional params:
    #ma_len - for moving average.
    #plot - Default false. If true plots appear in the browser.
    def test_get_netted_btd_graph_values(self):
        # Parameters for the API call
        start = '2022-09-01T00:00:00'
        end = '2022-09-04T11:59:59'
        ma_len = 180
        plot = True
        authorization = 'Token 2e5936965874fbedc812833105e09e710467fa5aab051cacc47e72f24a3e0f87'

        # Perform the API call through the SDK function
        self.controller.get_netted_btd_graph_values(start, end, ma_len, plot, authorization)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Todo: Add description for test test_get_bot_imbalance_calculation_error
    def test_get_bot_imbalance_calculation_error(self):
        # Parameters for the API call
        start = '2022-08-01T00:00:00'
        end = '2022-08-31T11:59:59'
        authorization = 'Token 37d77fc95cd2db6b3c65113678cdcb7bcf5206a4b85766f2eeedb68aec8b69c1'

        # Perform the API call through the SDK function
        self.controller.get_bot_imbalance_calculation_error(start, end, authorization)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Return netted Hourly profit and netted Imbalance
    #
    #poly_layer - on netted imbalance indicates if we made profit or loss at the given hour. 
    #
    #ma_len - shows moving average with selected length
    #
    def test_get_netted_hourly_data(self):
        # Parameters for the API call
        start = '2022-06-01T00:00:00'
        end = '2022-08-31T23:59:59'
        net = True
        plot = True
        poly_layer = True
        ma_len = 48
        authorization = 'Token 37d77fc95cd2db6b3c65113678cdcb7bcf5206a4b85766f2eeedb68aec8b69c1'

        # Perform the API call through the SDK function
        self.controller.get_netted_hourly_data(start, end, net, plot, poly_layer, ma_len, authorization)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Returns direction changes with each direction length.
    #
    #Flat - Defualt False. Returns response without trend_trades sub list.
    def test_get_direction_change_trends(self):
        # Parameters for the API call
        start = '2022-08-01T00:00:00'
        end = '2022-08-31T23:59:59'
        flat = False
        authorization = 'Token 37d77fc95cd2db6b3c65113678cdcb7bcf5206a4b85766f2eeedb68aec8b69c1'

        # Perform the API call through the SDK function
        self.controller.get_direction_change_trends(start, end, flat, authorization)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

